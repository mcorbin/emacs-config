package algo;

import java.util.List;
import java.util.Properties;
import generic.AlgorithmeAbstract;
import generic.ProblemeAbstract;
import generic.SolutionAbstract;

public class Greedy extends AlgorithmeAbstract {

    public Greedy(ProblemeAbstract probleme,
            SolutionAbstract initiale,
            String fichierParamettre) {
        super(probleme, initiale, fichierParamettre);
    }

    //proposition d'une nouvelle solution
    public boolean amelioreSolution() {

        double min = problemeATraiter.evaluation(solutionEnCours);
        SolutionAbstract meilleureSolution = solutionEnCours;
        this.incrementeEvaluations(1);
        List<SolutionAbstract> solutionsVoisines = meilleureSolution.retourneVoisinage();
        for (SolutionAbstract solutionVoisine : solutionsVoisines) {
            double valSolutionVoisine = problemeATraiter.evaluation(solutionVoisine);
            this.incrementeEvaluations(1);
            if (valSolutionVoisine < min) {
                
                meilleureSolution = solutionVoisine;
                min = valSolutionVoisine;
            }
        }

        //on s'arrete si smax=s
        boolean fin = (meilleureSolution == this.solutionEnCours);
        this.solutionEnCours = meilleureSolution;
        return estFini();
    }

}
